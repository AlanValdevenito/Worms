    @startuml
    hide empty attributes
    hide circle

    package "Servidor" {
    
    class ServerClient <<thread>>{
        - Queue sender
        - Queue receiver
        - Sender sender_th
        - Receiver receiver_th
        - ServerProtocol protocolo
        + changeReceiverQueue()
        + start()
    }
    
    class Game {
        - common_queue: Queue
        - broadcaster: Broadcaster
        - players: List<Player> 
        + run()
        + update()
        + sendGameState()
    }

    class World {
        - worms: List<Worm>
        - beams: List<Beam>
        + step()
    }
    
    class Lobby {
        - Queue lobby_queue
        - List partidas
        - int partida_id
        - int id_cliente
        + newClient()
        + sendMatchList()
        + removerPartidasMuertas()
        + agregarClienteAPartida()
    }
    
    class Partida {
        - Queue common_queue
        - common_queue: Queue
        - List clients
        - Broadcaster broadcaster
        - Game game
        - int jugadores
        - int conectados
        - bool partida_empezada
        + sendMapTo()
        + start()
        + finish()
        + forceFinish()
        + getId()
        + is_dead()
        + esta_completa()
    }

    class Aceptador <<thread>>{
        - Lobby
        - Socket
    }
    
    class Server {
        - Socket aceptador
        - Aceptador accept_th
        + main()
    }
    }

    package "Protocolos" {
    
    class ProtocoloServidor {
        - skt: Socket
        +recibirActividad()
        +enviarListaDePartidas()
        +enviarListaDeGusanos()
        +enviarIniciarPartida()
        +enviarGanador()
        +enviarTrayectoriaDeGranada()
        +enviarTrayectoriaDeBazuka()
        +enviarProyectiles()
    }
    
    class ProtocoloCliente {
        - skt: Socket
        +receive()
        +enviarSeleccion()
        +enviarAtaqueConBate()
        +enviarAtaqueConGranada()
        +enviarAtaqueConGranada()
        +moverADerecha()
        +moverAIzquierda()
        +enviarAtaqueaereo()
        +enviarEquipadoDeArma()
    }
    }

    package "Interfaz de Usuario"  {
    class Client {
        - send_queue: Queue 
        - recv_queue: Queue 
        - id: uint8_t 
        - was_closed: bool 
        - protocolo: ClientProtocol 
        - recv_th: Receiver 
        - send_th: Sender 
        +start()
        +kill()
    } 

    class Vista {
        -cliente: Client
        -menu: Menu
        -partida: Partida
        +iniciar()
    }
    
    class Partida {
        -cliente: Client
        -worms: Map<int, Worm>
        -camara: Camara
        +iniciar()
        +handleEvents()
        +actualizar()
        +renderizar()
    }

    class Worm {
        -animacion: Animation
        -arma: Arma
        +update()
        +render()
    }

    class Animation {
        -textura: Texture
        -currentFrame: int
        -repetirAnimacion: bool
        +render()
        +update()
        +cambiar()
    }

    class Arma {
        -x: float
        -y: float
        -estado: int
        +update()
        +render()
    }
    
    }

Client <-down-> ProtocoloCliente
ServerClient <-down-> ProtocoloServidor

Vista -down-> Client
Vista -down-> "Interfaz de Usuario.Partida"
"Interfaz de Usuario.Partida"-up-> Worm
"Interfaz de Usuario.Worm"-right-> Arma

Arma -down-> Animation
Worm -down-> Animation

"Servidor.Partida" -down-> ServerClient
"Servidor.Partida" -down-> Game
Lobby--left->"Servidor.Partida"
Aceptador --left--> Lobby
Game --right--> World
Server --left-> Aceptador

 @enduml